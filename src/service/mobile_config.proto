syntax = "proto3";

package helium.mobile_config;

// ------------------------------------------------------------------
// Message Definitions
// ------------------------------------------------------------------

// == Field Notes ==
//
// - Every message including a `signature` field will need to be signed over the
//   complete message, with the `signature` field set to an empty value.
//   Requests are expected to be signed by the client to validate authorization
//   to make the request and responses are signed by the mobile_config server to
//   ensure validity of the data returned
//
// - Keypair fields are binary encoded public keys, Rust encoding example here:
//    https://github.com/helium/helium-crypto-rs/blob/main/src/public_key.rs#L347-L354

message hotspot_metadata {
  // The public key binary address and on-chain identity of the hotspot
  bytes address = 1;
  // The res12 h3 index asserted address of the hotspot as a string
  // where an unasserted hotspot returns an empty string
  string location = 2;
}

message hotspot_metadata_req_v1 {
  // The public key address of the hotspot to look up
  bytes address = 1;
  bytes signature = 2;
}

message hotspot_metadata_res_v1 {
  hotspot_metadata metadata = 1;
  // unix epoch timestamp in seconds
  uint64 timestamp = 2;
  bytes signature = 3;
}

message hotspot_metadata_stream_req_v1 {
  // max number of hotspot metadata in each message of the response stream
  uint32 batch_size = 1;
  bytes signature = 2;
}

message hotspot_metadata_stream_res_v1 {
  // a list of hotspot metadata numbering up to the request batch size
  repeated hotspot_metadata hotspots = 1;
  // unix epoch timestamp in seconds
  uint64 timestamp = 2;
  bytes signature = 3;
}

message router_get_req_v1 {
  // Pubkey binary of the requested router
  bytes pubkey = 1;
  // Signature over the request by the requesting oracle
  bytes signature = 2;
}

message router_get_res_v1 {
  // Pubkey binary of the requested router, confirming registration
  bytes pubkey = 1;
  // unix epoch timestamp in seconds
  uint64 timestamp = 2;
  // Signature over the response by the config service
  bytes signature = 3;
}

message router_list_req_v1 {
  // Signature over the request by the requesting oracle
  bytes signature = 1;
}

message router_list_res_v1 {
  // List of public key binaries of all registered routers
  repeated bytes routers = 1;
  // unix epoch timestamp in seconds
  uint64 timestamp = 2;
  // Signature over the response by the config service
  bytes signature = 3;
}

message admin_add_key_req_v1 {
  enum key_type_v1 {
    // administrative operator key
    administrator = 0;
    // packet routing infrastructure key for routing streams
    packet_router = 1;
  }

  bytes pubkey = 1;
  key_type_v1 key_type = 2;
  // Signature of the request message signed by an admin key
  // already registered to the config service
  bytes signature = 3;
}

message admin_remove_key_req_v1 {
  bytes pubkey = 1;
  // Signature of the request message signed by an admin key
  // already registered to the config service
  bytes signature = 2;
}

message admin_key_res_v1 {}

// ------------------------------------------------------------------
// Service Definitions
// ------------------------------------------------------------------

service hotspot {
  // Get metadata info for the specified hotspot
  rpc metadata(hotspot_metadata_req_v1) returns (hotspot_metadata_res_v1);
  // Get a stream of hotspot metadata
  rpc metadata_stream(hotspot_metadata_stream_req_v1)
      returns (stream hotspot_metadata_stream_res_v1);
}

service router {
  // Verify a given router key with data transfer burn authority is registered
  // returning the requested pubkey binary if present
  rpc get(router_get_req_v1) returns (router_get_res_v1);
  // Retrieve a list of all registered router pubkey binaries with burn
  // authority registered to the config service
  rpc list(router_list_req_v1) returns (router_list_res_v1);
}

service admin {
  // Authorize a public key for validating trusted rpcs
  rpc add_key(admin_add_key_req_v1) returns (admin_key_res_v1);
  // Deauthorize a public key for validating trusted rpcs
  rpc remove_key(admin_remove_key_req_v1) returns (admin_key_res_v1);
}
