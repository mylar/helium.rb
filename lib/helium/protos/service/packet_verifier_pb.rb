# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service/packet_verifier.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("service/packet_verifier.proto", :syntax => :proto3) do
    add_message "helium.packet_verifier.valid_packet" do
      optional :payload_size, :uint32, 1
      optional :gateway, :bytes, 2
      optional :payload_hash, :bytes, 3
    end
    add_message "helium.packet_verifier.invalid_packet" do
      optional :payload_size, :uint32, 1
      optional :gateway, :bytes, 2
      optional :payload_hash, :bytes, 3
      optional :reason, :enum, 4, "helium.packet_verifier.invalid_packet_reason"
    end
    add_message "helium.packet_verifier.valid_data_transfer_session" do
      optional :pub_key, :bytes, 1
      optional :upload_bytes, :uint64, 2
      optional :download_bytes, :uint64, 3
      optional :num_dcs, :uint64, 4
      optional :payer, :bytes, 5
      optional :first_timestamp, :uint64, 6
      optional :last_timestamp, :uint64, 7
    end
    add_enum "helium.packet_verifier.invalid_packet_reason" do
      value :invalid_packet_reason_insufficient_balance, 0
    end
  end
end

module Helium
  module PacketVerifier
    Valid_packet = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("helium.packet_verifier.valid_packet").msgclass
    Invalid_packet = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("helium.packet_verifier.invalid_packet").msgclass
    Valid_data_transfer_session = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("helium.packet_verifier.valid_data_transfer_session").msgclass
    Invalid_packet_reason = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("helium.packet_verifier.invalid_packet_reason").enummodule
  end
end
